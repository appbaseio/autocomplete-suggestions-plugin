var _algoliaAutocompleteJs = require("@algolia/autocomplete-js");
require("@algolia/autocomplete-theme-classic");
var _appbaseioAutocompleteSuggestionsPlugin = require("@appbaseio/autocomplete-suggestions-plugin");
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _appbaseioAutocompleteSuggestionsPluginDefault = _parcelHelpers.interopDefault(_appbaseioAutocompleteSuggestionsPlugin);
var _preact = require("preact");
var _utils = require("./utils");
// appbase client config object
const appbaseClientConfig = {
  url: "https://appbase-demo-ansible-abxiydt-arc.searchbase.io",
  app: "best-buy-dataset",
  credentials: "b8917d239a52:82a2f609-6439-4253-a542-3697f5545947",
  settings: {
    userId: "s@s",
    recordAnalytics: true
  }
};
// reactivesearch api configuration
const rsApiConfig = {
  highlight: true,
  dataField: [{
    field: "name.autosuggest",
    weight: "1"
  }, {
    field: "name",
    weight: "3"
  }],
  enableRecentSuggestions: true,
  enablePopularSuggestions: true,
  recentSuggestionsConfig: {
    size: 5,
    minHits: 2,
    minChars: 4
  },
  popularSuggestionsConfig: {
    size: 5,
    minCount: 2,
    minChars: 3
  },
  size: 5
};
// default usage: plugin to fetch suggestions
const defaultUsagePlugin = _appbaseioAutocompleteSuggestionsPluginDefault.default(appbaseClientConfig, {
  ...rsApiConfig
}, {});
// advanced usage: plugin to fetch suggestions and
// render custom ui for header, footer and suggestion items
const advancedUsagePlugin = _appbaseioAutocompleteSuggestionsPluginDefault.default(appbaseClientConfig, {
  ...rsApiConfig,
  enableRecentSuggestions: false
}, {
  renderItem: props => {
    const {item, setQuery, refresh} = props;
    if (item.type === "index") {
      return _preact.h("a", {
        className: "aa-item product-item",
        href: item._source.url,
        target: "_blank",
        rel: "noreferrer"
      }, _preact.h("div", {
        className: "product-image"
      }, _preact.h("img", {
        src: item._source.image,
        alt: item.value
      })), _preact.h("div", {
        className: "product-details"
      }, _preact.h("h4", null, item.value), _preact.h("p", null, item._source.shortDescription)));
    }
    return _preact.h("div", {
      className: "item"
    }, _preact.h("div", {
      className: "item__content-wrapper"
    }, _utils.getIcon(item.type)(), _preact.h("span", {
      dangerouslySetInnerHTML: {
        __html: item.value
      }
    })), _preact.h("div", {
      className: "item__actions-wrapper"
    }, " ", _preact.h("button", {
      onClick: e => {
        e.stopPropagation();
        setQuery(item.label);
        refresh();
      },
      type: "button",
      className: "set-search-arrow"
    }, _preact.h("svg", {
      viewBox: "0 0 24 24",
      fill: "currentColor"
    }, _preact.h("path", {
      d: "M8 17v-7.586l8.293 8.293c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414l-8.293-8.293h7.586c0.552 0 1-0.448 1-1s-0.448-1-1-1h-10c-0.552 0-1 0.448-1 1v10c0 0.552 0.448 1 1 1s1-0.448 1-1z"
    })))));
  },
  onItemSelect: props => {
    const {item: {url, label}, setQuery, refresh} = props;
    if (url) {
      window.open(url);
    } else {
      console.log(label);
      setQuery(label.replace("<b class=\"highlight\">", "")).replace("</b>", "");
      refresh();
    }
  },
  renderHeader: props => {
    return _preact.h("h4", null, "Products Listing ", _preact.h("hr", {
      style: {
        borderColor: "#d7d5f5"
      }
    }));
  },
  renderFooter: props => {
    return _preact.h("hr", {
      style: {
        borderColor: "#d7d5f5"
      }
    });
  },
  renderNoResults: props => {
    if (props.state.query === "") {
      return _preact.h("p", null, "Search for something to get direct product suggestions!");
    } else {
      return _preact.h("p", null, "No products found! Try searching for something else!");
    }
  }
});
_algoliaAutocompleteJs.autocomplete({
  container: "#autocomplete",
  placeholder: "Search for products",
  openOnFocus: true,
  // debug: true, uncomment to keep the dropdown open
  plugins: [defaultUsagePlugin, advancedUsagePlugin],
  detachedMediaQuery: "none"
});
